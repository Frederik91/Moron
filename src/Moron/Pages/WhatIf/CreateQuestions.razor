@page "/whatif/session/{SessionId:guid}/{PlayerId:guid}/Questions"
@inject ISessionService sessionService
@inject ISessionPlayerService sessionPlayerService
@inject IPlayerService playerService
@inject IUriHelper uriHelper
@inject IConfiguration configuration
@inject IWhatIfOptionService optionService
@inject IQuestionService questionService


<style>
    .card-square.mdl-card {
        width: 320px;
        height: 260px;
    }

    .create-card-square > .mdl-card__title {
        color: #000;
    }
</style>

@if (Questions != null && !Submitted)
{
    foreach (var question in Questions)
    {
        <div class="create-card-square mdl-card mdl-shadow--2dp" style="margin: 10px">
            <div class="mdl-card__title mdl-card--expand">
                <div class="row">
                    <div>
                        <h2 class="mdl-card__title-text">Question:</h2>
                    </div>
                    <div class="mdl-textfield mdl-js-textfield">
                        <textarea class="mdl-textfield__input" type="text" bind="@question.Text" rows="3"></textarea>
                    </div>
                </div>
            </div>
        </div>
    }
    <a class="mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect" onclick="@SubmitQuestions">
        Submit
    </a>
}
@if (Submitted)
{
    <h1>Waiting for others players to finish writing questions</h1>
}

@functions {
    [Parameter]
    public Guid SessionId { get; set; }

    [Parameter]
    public Guid PlayerId { get; set; }

    ISession ActiveSession { get; set; }

    public bool Submitted { get; set; }

    public WhatIfOption Options { get; set; }

    public List<Question> Questions { get; set; }

    public List<Player> Players { get; set; }
    System.Timers.Timer Timer;

    protected override async Task OnInitAsync()
    {
        Players = new List<Player>();
        ActiveSession = await sessionService.GetAsync(SessionId);
        Options = await optionService.Get(SessionId);
        var questions = await questionService.GetQuestionsCreatedByPlayer(SessionId, PlayerId);
        Questions = new List<Question>(questions);

        Timer = new System.Timers.Timer(500);
        Timer.Elapsed += Elapsed;
        Timer.Start();

        uriHelper.OnLocationChanged += LocationChanged;
    }

    public async void LocationChanged(object sender, string path)
    {
        if (path?.ToLower().Contains("whatif") != true)
        {
            uriHelper.OnLocationChanged -= LocationChanged;
            await sessionPlayerService.RemovePlayerFromSession(ActiveSession.Id, PlayerId);
            Timer.Stop();
        }
    }

    async Task SubmitQuestions()
    {
        if (Questions.Any(x => string.IsNullOrWhiteSpace(x.Text)))
        {
            return;
        }

        await questionService.Submit(Questions);
        Submitted = true;
    }

    private async void Elapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        if (Submitted && await questionService.AllQuestionsSubmitted(ActiveSession.Id))
        {
            uriHelper.NavigateTo($"whatif/session/{SessionId}/{PlayerId}/answers");
            Timer.Stop();
        }
    }
}
