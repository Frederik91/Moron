@page "/whatif/session/{SessionId:guid}/{PlayerId:guid}/Lobby"
@inject ISessionService sessionService
@inject IGameService gameService
@inject IQuestionService questionService
@inject IAnswerService answerService
@inject IPlayerService playerService
@inject IUriHelper uriHelper
@inject IConfiguration configuration
@inject IWhatIfOptionService optionService

@if (ActiveSession != null)
{
    <h1>Welcome to session @ActiveSession.Name</h1>
    <h2>Invite others to join using this code: </h2>

    <h1 class="text-center">@ActiveSession.JoinId</h1>
    <h3 class="text-center">Game master is @ActiveSession.Owner.Name</h3>

    if (IsOwner)
    {
        <h4>
            Number of cards:
            <input bind="@Options.NumberOfCards" type="number" />
        </h4>
    }
    else
    {
        <h4>Number of cards: @Options.NumberOfCards</h4>
    }


    @foreach (var player in Players)
    {
        <span class="mdl-chip mdl-chip--contact">
            <span class="mdl-chip__contact mdl-color--teal mdl-color-text--white">@player.Name.First()</span>
            <span class="mdl-chip__text">@player.Name</span>
        </span>
    }

    if (IsOwner)
    {
        <button onclick="@Start" class="mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect">Start</button>
    }
}

@functions {
    [Parameter]
    public Guid SessionId { get; set; }

    [Parameter]
    public Guid PlayerId { get; set; }

    public bool IsOwner => ActiveSession?.Owner?.PlayerId == PlayerId;

    public WhatIfOption Options { get; set; }

    Session ActiveSession { get; set; }

    [Parameter]
    public List<Player> Players { get; set; }
    System.Timers.Timer Timer;

    protected override async Task OnInitAsync()
    {
        Players = new List<Player>();
        ActiveSession = await sessionService.GetAsync(SessionId);
        Options = await optionService.Get(SessionId);
        await UpdatePlayers();
        Timer = new System.Timers.Timer(500);
        Timer.Elapsed += Elapsed;
        Timer.Start();

        uriHelper.OnLocationChanged += LocationChanged;
    }

    public async void LocationChanged(object sender, string path)
    {
        if (path?.ToLower().Contains("whatif") != true)
        {
            uriHelper.OnLocationChanged -= LocationChanged;
            await sessionService.RemovePlayerFromSession(ActiveSession.SessionId, PlayerId);
        }
    }

    async Task Start()
    {
        if (Players.Count < 2)
        {
            return;
        }

        var questions = await questionService.GenerateQuestionsForSession(ActiveSession.SessionId);
        await answerService.GenerateSessionAnswers(ActiveSession.SessionId, questions);
        await gameService.Start(ActiveSession.SessionId);
        await sessionService.Start(ActiveSession.SessionId);
        uriHelper.NavigateTo($"/whatif/session/{SessionId}/{PlayerId}/Questions");
        Timer.Stop();
    }

    async Task UpdatePlayers()
    {
        var players = await sessionService.GetPlayersInSession(ActiveSession.SessionId);
        Players = players?.ToList();
    }

    private async void Elapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        await UpdatePlayers();
        await RefreshOptions();
        await RefreshSession();
        await this.Invoke(this.StateHasChanged);
    }

    async Task RefreshOptions()
    {
        var savedOptions = await optionService.Get(ActiveSession.SessionId);
        if (!IsOwner)
        {
            Options = savedOptions;
        }
        else if (Options.NumberOfCards != savedOptions.NumberOfCards)
        {
            await optionService.Update(SessionId, Options);
        }
    }

    async Task RefreshSession()
    {
        if (IsOwner)
        {
            return;
        }
        var session = await sessionService.GetAsync(SessionId);
        if (session.Started)
        {
            uriHelper.NavigateTo($"/whatif/session/{SessionId}/{PlayerId}/Questions");
            Timer.Stop();
        }
    }
}