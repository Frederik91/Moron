@page "/whatif/session/{SessionId:guid}/{PlayerId:guid}/Game"
@inject IAnswerService answerService
@inject IWhatIfOptionService optionService
@inject IGameService gameService
@inject IQuestionService questionService
@inject IPlayerService playerService
@inject IUriHelper uriHelper

<style>
    .answer-card.mdl-card {
        width: 256px;
        height: 256px;
        background: #3E4EB8;
    }

    .answer-card > .mdl-card__actions {
        border-color: rgba(255, 255, 255, 0.2);
    }

    .answer-card > .mdl-card__title {
        align-items: flex-start;
    }

        .answer-card > .mdl-card__title > h4 {
            margin-top: 0;
        }

    .answer-card > .mdl-card__actions {
        display: flex;
        box-sizing: border-box;
        align-items: center;
    }

        .answer-card > .mdl-card__actions > .material-icons {
            padding-right: 10px;
        }

        .answer-card > .mdl-card__title,
        .answer-card > .mdl-card__actions,
        .answer-card > .mdl-card__actions > .mdl-button {
            color: #fff;
        }

    .question-card.mdl-card {
        width: 256px;
        height: 256px;
        background: #ff6a00;
    }

    .question-card > .mdl-card__actions {
        border-color: rgba(255, 255, 255, 0.2);
    }

    .question-card > .mdl-card__title {
        align-items: flex-start;
    }

        .question-card > .mdl-card__title > h4 {
            margin-top: 0;
        }

    .question-card > .mdl-card__actions {
        display: flex;
        box-sizing: border-box;
        align-items: center;
    }

        .question-card > .mdl-card__actions > .material-icons {
            padding-right: 10px;
        }

        .question-card > .mdl-card__title,
        .question-card > .mdl-card__actions,
        .question-card > .mdl-card__actions > .mdl-button {
            color: #fff;
        }
</style>


@if (Question != null)
{
    <div class="question-card-square mdl-card mdl-shadow--2dp" style="margin: 10px">
        <div class="mdl-card__title mdl-card--expand">
            <h4>
                Question:<br>
                @Question.Text
            </h4>
        </div>
        <div class="mdl-card__actions mdl-card--border">
            <div class="mdl-layout-spacer"></div>
        </div>
    </div>
}
else if (Answer != null)
{
    <div class="answer-card-square mdl-card mdl-shadow--2dp" style="margin: 10px">
        <div class="mdl-card__title mdl-card--expand">
            <h4>
                Answer:<br>
                @Answer.Text
            </h4>
        </div>
        <div class="mdl-card__actions mdl-card--border">
            <a class="mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect" onclick="@Next">
                Next
            </a>
            <div class="mdl-layout-spacer"></div>
        </div>
    </div>
}
else
{
    <h1>Waiting for your turn</h1>
}

@functions {
    [Parameter]
    public Guid SessionId { get; set; }

    [Parameter]
    public Guid PlayerId { get; set; }

    public bool IsWaiting { get; set; }

    public Question Question { get; set; }
    public Answer Answer { get; set; }

    System.Timers.Timer Timer;

    protected override async Task OnInitAsync()
    {
        IsWaiting = true;
        while (!(await gameService.GameIsStarted(SessionId)))
        {
            await Task.Delay(50);
        }

        Timer = new System.Timers.Timer(500);
        Timer.Elapsed += Elapsed;
        Timer.Start();
    }

    private async void Elapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        var turn = await gameService.GetTurn(SessionId);
        if (turn is null)
        {
            uriHelper.NavigateTo($"whatif/session/{SessionId}/Finish");
            Timer.Stop();
            return;
        }

        if (turn.PlayerQuestionId != PlayerId && turn.PlayerAnswerId != PlayerId)
        {
            Answer = null;
            Question = null;
            await this.Invoke(this.StateHasChanged);
            return;
        }

        if (turn.PlayerQuestionId == PlayerId && Question?.Id != turn.QuestionId)
        {
            Answer = null;
            Question = await questionService.Get(SessionId, turn.QuestionId);
            await this.Invoke(this.StateHasChanged);
            return;
        }
        if (turn.PlayerAnswerId == PlayerId && Answer?.Id != turn.AnswerId)
        {
            Question = null;
            Answer = await answerService.Get(SessionId, turn.AnswerId);
            await this.Invoke(this.StateHasChanged);
            return;
        }
    }

    async Task Next()
    {
        await gameService.Next(SessionId, Answer.Id);
        Question = null;
        Answer = null;
    }
}
